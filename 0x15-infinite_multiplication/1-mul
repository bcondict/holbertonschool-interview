#include "holberton.h"

/**
 * calculate_digits - calculate the number of digits of a number 
 *
 * @num: number to calculate digits
 *
 * Return: digits of number
 */
long int calculate_digits(long int num)
{
	long int digits = 0, temp = num;

	while (temp != 0)
	{
		temp /= 10;
		digits++;
	}

	return (digits);
}

/**
 * print_error - print error char by char
 *
 * Return: Nothing
 */
void print_error(void)
{
	_putchar('E');
	_putchar('r');
	_putchar('r');
	_putchar('o');
	_putchar('r');
	_putchar('\n');
}

/**
 * is_valid - check if arguments passed are valid
 * 
 * @ac: Number of arguments
 * @av: Arguments 
 *
 * Return: multiplication of valid arguments, -1 if not valid
 */
int is_valid(int ac, char *av[])
{
	int num1 = 0, num2 = 0;

	if (ac != 3)
		return (-1);

	num1 = atoi(av[1]);
	num2 = atoi(av[2]);

	if ((*av[1] != '0' && num1 == 0) || (*av[2] != '0' && num2 == 0 ))
	{
		return (-1);
	}

	return (num1 * num2);
}

/**
 * main - Entry point
 *
 * @ac: Number of arguments
 * @av: Arguments
 *
 * Return: 0 on success, 98 on failure
 */
// int main(int argc, __attribute__((unused)) char *argv[])
int main(int ac, char *av[])
{
	int result = 0, temp = 0;
	int nDigits = 0;
	char char_digit = '\0';

	result = is_valid(ac, av);
	if (result == -1)
	{
		print_error();
		exit(98);
	}
	if (result == 0)
	{
		_putchar('0');
	}

	nDigits = calculate_digits(result);

	temp = result;
	for (int i = nDigits - 1; i >= 0; i--)
	{
		int digit = temp / pow(10, i);

		char_digit = digit + '0';
		_putchar(char_digit);

		temp %= (int)pow(10, i);
	}
	_putchar('\n');

	return (0);
}


